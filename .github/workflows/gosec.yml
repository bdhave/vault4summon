name: 'Run Gosec'
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
      - cron: '0 0 * * *' # see https://crontab.guru/ for more examples

permissions:  # added using https://github.com/step-security/secure-workflows
  contents: read

jobs:
  tests:
    permissions:
      contents: read  # for actions/checkout to fetch code
      security-events: write  # for github/codeql-action/upload-sarif to upload SARIF results
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: 'Harden Runner'
        uses: step-security/harden-runner@6dacdfc16caa5ebd987908a44ab5b425193385f6
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            proxy.golang.org:443
            storage.googleapis.com:443
            artifactcache.actions.githubusercontent.com:443

      - name: 'Checkout Source'
        uses: actions/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222

      - name: 'Run Gosec Security Scanner'
        uses: securego/gosec@970cc2957fb03f53cc97ddc3568347a31a80589d
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-no-fail -fmt sarif -out gosec.sarif ./...'

      - name: 'Upload SARIF file'
        uses: github/codeql-action/upload-sarif@bb28e7e59e2ad6c1e5400e671795b2fa1b2fca6f
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: gosec.sarif

      - name: 'Upload artifact'
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # v3.1.1
        with:
          name: Gosec SARIF file
          path: gosec.sarif
          retention-days: 7

